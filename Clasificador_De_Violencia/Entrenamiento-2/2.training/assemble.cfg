[paths]
train = "train.spacy"
dev = "test.spacy"
# A handy variable to control the base pipeline
source = "es_core_news_sm"

[system]
gpu_allocator = null

[nlp]
lang = "es"
pipeline = ["textcat"]
batch_size = 1000
tokenizer = {"@tokenizers":"spacy.Tokenizer.v1"}

[components]

[components.textcat]
# This is the component we just trained
source = "output/model-best"
# This should use the tok2vec it was trained with
replace_listeners = ["model.tok2vec"]

# the rest of the components are just sourced from the base pipeline

[corpora]

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths:dev}
max_length = 0

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths:train}
max_length = 0


[training]
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
accumulate_gradient = 1
patience = 1600
max_epochs = 0
max_steps = 20000
eval_frequency = 200
frozen_components = []
annotating_components = []
before_to_disk = null
before_update = null

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2
get_length = null

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001
t = 0.0

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar = false

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.00000001
learn_rate = 0.001

[training.score_weights]
cats_score = 1.0
cats_score_desc = null
cats_micro_p = null
cats_micro_r = null
cats_micro_f = null
cats_macro_p = null
cats_macro_r = null
cats_macro_f = null
cats_macro_auc = null
cats_f_per_type = null
